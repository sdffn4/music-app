// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Cover {
  id            String @id @default(uuid())
  source        String
  dominantColor String

  tracks    Track[]
  playlists Playlist[]
}

model Track {
  id       String @id @default(uuid())
  title    String
  artist   String
  album    String
  source   String
  duration Float

  coverId String?
  cover   Cover?  @relation(fields: [coverId], references: [id], onDelete: Cascade)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  playlists Playlist[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Playlist {
  id          String  @id @default(uuid())
  title       String
  description String?
  duration    Int     @default(0)
  isAlbum     Boolean @default(false)
  isPublic    Boolean @default(false)

  coverId String?
  cover   Cover?  @relation(fields: [coverId], references: [id], onDelete: Cascade)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  tracks Track[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  tracks    Track[]
  playlists Playlist[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
