// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  name          String         @default(uuid())
  avatar        String?
  playlists     Playlist[]
  tracks        Track[]
  subscriptions Subscription[]

  // NextAuth.js section begin
  email         String    @unique
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]
  // NextAuth.js section end

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Playlist {
  id            String              @id @default(uuid())
  title         String
  cover         String              @default("")
  user          User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  tracks        TracksOnPlaylists[]
  subscriptions Subscription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Track {
  id              String              @id @default(uuid())
  title           String              @default("Not specified")
  artist          String              @default("Not specified")
  duration        Float               @default(0)
  source          String
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  playlists       TracksOnPlaylists[]
  uncheckedTracks UncheckedTracks[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TracksOnPlaylists {
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  playlistId String
  track      Track    @relation(fields: [trackId], references: [id])
  trackId    String

  @@id([playlistId, trackId])
}

model Subscription {
  id              String            @id @default(uuid())
  user            User              @relation(fields: [userId], references: [id])
  userId          String
  playlist        Playlist          @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  playlistId      String
  uncheckedTracks UncheckedTracks[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UncheckedTracks {
  track          Track        @relation(fields: [trackId], references: [id], onDelete: Cascade)
  trackId        String
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  subscriptionId String

  @@id([trackId, subscriptionId])
}

// NextAuth.js section begin

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// NextAuth.js section end
